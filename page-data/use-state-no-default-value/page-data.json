{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/use-state-no-default-value",
    "result": {"data":{"markdownRemark":{"html":"<p>We'll start from this <a href=\"https://codesandbox.io/s/character-sheet-base-uxlfu?file=/src/Application.tsx\">base</a>. You can also use <code class=\"language-text\">projects/character-card</code> or start with <code class=\"language-text\">examples/08-character-card</code> in the project repository.</p>\n<p>The previous example works, but you might not always have a default value for a given piece of state at the time that the component is initiatlized. For example, here is some psuedo-code:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>character<span class=\"token punctuation\">,</span> setCharacter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Eventually, <code class=\"language-text\">user</code> should be something and we'll likely get it from the API, but—initially—we don't have a value just yet. There is nothing for TypeScript to infer.</p>\n<p>Let's assume our User model has the following shape to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">CharacterType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  alignment<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  intelligence<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  strength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  speed<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  durability<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  power<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  combat<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  total<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let's also imagine for a moment that we have an asynchronous API request called <code class=\"language-text\">getCurrentUser</code>. We'll polyfill it as follows for now.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Fake API Request</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> fetchCharacter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>CharacterType<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>character<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Basically, this fake API request just waits a moment and then returns an object that adheres to the <code class=\"language-text\">User</code> interface that we defined earlier.</p>\n<p>We can then give TypeScript a hint to the properties that we <em>expect</em> the state to have once it's loaded.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>character<span class=\"token punctuation\">,</span> setCharacter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CharacterType <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We know that this component needs just the <code class=\"language-text\">name</code> property and that it expects it to be a string, but that's not really DRY code. Instead, we can just tell the component to expect an object that conforms to the <code class=\"language-text\">User</code> interface.</p>\n<p>Our component, might look something like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>character<span class=\"token punctuation\">,</span> setCharacter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CharacterType <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCharacter</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>character <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharacterInformation</span></span> <span class=\"token attr-name\">character</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>character<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What if we wanted to have a state that kept track of whether or not we loaded the component. It might look something like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>character<span class=\"token punctuation\">,</span> setCharacter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CharacterType <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetchCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCharacter</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>loading <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharacterInformation</span></span> <span class=\"token attr-name\">character</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>character<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But wait! TypeScript is angry with us. That's because it doesn't know whether or not <code class=\"language-text\">character</code> is <code class=\"language-text\">null</code> or not.</p>\n<p>There are a few ways that we can handle this.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n  loading <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    character <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharacterInformation</span></span> <span class=\"token attr-name\">character</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>character<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or we can just flip the logic back to make sure we confirm that there is a <code class=\"language-text\">character</code>, this kind of defeats the purpose of having <code class=\"language-text\">loading</code> at all in this situation.</p>\n<p>What's also interesting is that this doesn't satisfy TypeScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n  loading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>character <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharacterInformation</span></span> <span class=\"token attr-name\">character</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>character<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Simply asserting that it <em>doesn't</em> exist is not enough to prove to TypeScript that it does.</p>\n<p>Another option is to treat them independently.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>loading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>character <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharacterInformation</span></span> <span class=\"token attr-name\">character</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>character<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You can see the completed example <a href=\"https://codesandbox.io/s/character-sheet-complete-jb8d4?file=/src/Application.tsx:503-620\">here</a>.</p>\n<h2 id=\"where-are-we-now\" style=\"position:relative;\"><a href=\"#where-are-we-now\" aria-label=\"where are we now permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where Are We Now?</h2>\n<p>You can find the current state of the code in:</p>\n<ul>\n<li><code class=\"language-text\">examples/09-character-card-eventual-state</code></li>\n<li>In <code class=\"language-text\">projects/character-card</code> on the <code class=\"language-text\">character-card-eventual-state</code> branch.</li>\n<li><a href=\"https://codesandbox.io/s/character-sheet-complete-jb8d4?file=/src/Application.tsx:503-620\">CodeSandbox</a>.</li>\n</ul>","frontmatter":{"path":"/use-state-no-default-value","title":"Setting State without a Default Value","order":"3B","section":"Interacting with Components","description":"How to handle the case where we don’t have a default value for use with type inference. "}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"5D","path":"/refactoring-color-inputs","title":"Refactoring the Color Inputs"}}},{"node":{"frontmatter":{"order":"9G","path":"/create-context","title":"Solving for Context API Edge Cases"}}},{"node":{"frontmatter":{"order":"9F","path":"/dependent-props","title":"Demanding Props Based on Other Props"}}},{"node":{"frontmatter":{"order":"9A","path":"/limiting-props","title":"Limiting Props a Component Can Take Based on Other Props"}}},{"node":{"frontmatter":{"order":"9D","path":"/polymorphic-components-solution","title":"Polymorphic Components (Solution)"}}},{"node":{"frontmatter":{"order":"9C","path":"/polymorphic-components-exercise","title":"Polymorphic Components (Exercise)"}}},{"node":{"frontmatter":{"order":"9B","path":"/polymorphic-components","title":"Polymorphic Components with TypeScript"}}},{"node":{"frontmatter":{"order":"6C","path":"/utility-types-character-cards","title":"Refactoring the Character Cards with Utility Types"}}},{"node":{"frontmatter":{"order":"3D","path":"/class-based-components","title":"Typing Class-based Components"}}},{"node":{"frontmatter":{"order":"10C","path":"/sandboxes","title":"Code Sandboxes"}}},{"node":{"frontmatter":{"order":"2C","path":"/commonly-used-props","title":"Commonly-Used Props"}}},{"node":{"frontmatter":{"order":"5B","path":"/context-api","title":"The Context API"}}},{"node":{"frontmatter":{"order":"5C","path":"/context-with-reducer","title":"The Context API with State Management"}}},{"node":{"frontmatter":{"order":"3F","path":"/dog-facts","title":"Exercise: Dog Facts"}}},{"node":{"frontmatter":{"order":"3E","path":"/forms-and-events","title":"Forms and Events (Exercise)"}}},{"node":{"frontmatter":{"order":"9E","path":"/overloads","title":"Function Overloads"}}},{"node":{"frontmatter":{"order":"6A","path":"/generics","title":"Working with Generics"}}},{"node":{"frontmatter":{"order":"8B","path":"/higher-order-components-exercise","title":"Higher Order Components with TypeScript (Exercise)"}}},{"node":{"frontmatter":{"order":"8C","path":"/higher-order-components-solution","title":"Higher Order Components (Solution)"}}},{"node":{"frontmatter":{"order":"8A","path":"/higher-order-components","title":"Higher Order Components with TypeScript"}}},{"node":{"frontmatter":{"order":"10A","path":"/migration","title":"Migrating From JavaScript"}}},{"node":{"frontmatter":{"order":"5A","path":"/passing-dipatch","title":"Prologue: Passing Dispatch as a Props"}}},{"node":{"frontmatter":{"order":"4B","path":"/reducers-exercise","title":"Reducers (Exercise)"}}},{"node":{"frontmatter":{"order":"4C","path":"/reducers-solution","title":"Reducers (Solution)"}}},{"node":{"frontmatter":{"order":"4A","path":"/reducers","title":"Typing Reducers"}}},{"node":{"frontmatter":{"order":"2B","path":"/refactoring-from-proptypes","title":"Refactoring from PropTypes"}}},{"node":{"frontmatter":{"order":"1B","path":"/sales-pitch","title":"Why Use TypeScript? (A Sales Pitch)"}}},{"node":{"frontmatter":{"order":"2A","path":"/the-most-basic-example","title":"The Very Basics"}}},{"node":{"frontmatter":{"order":"6G","path":"/type-template-literals-refactoring-adjustment-actions","title":"Type Template Literals: Refactoring Our Color Adjustment Actions"}}},{"node":{"frontmatter":{"order":"6F","path":"/type-template-literals","title":"Type Template Literals"}}},{"node":{"frontmatter":{"order":"10B","path":"/types-versus-interfaces","title":"Types Versus Interfaces"}}},{"node":{"frontmatter":{"order":"2E","path":"/typing-children-solution","title":"Typing Children (Solution)"}}},{"node":{"frontmatter":{"order":"2D","path":"/typing-children","title":"Typing Children"}}},{"node":{"frontmatter":{"order":"2F","path":"/typing-styling","title":"Typing Styling"}}},{"node":{"frontmatter":{"order":"3C","path":"/use-effect","title":"useEffect"}}},{"node":{"frontmatter":{"order":"3B","path":"/use-state-no-default-value","title":"Setting State without a Default Value"}}},{"node":{"frontmatter":{"order":"3A","path":"/use-state","title":"useState Hook"}}},{"node":{"frontmatter":{"order":"6D","path":"/utility-types-exercise","title":"Utility Types (Exercise)"}}},{"node":{"frontmatter":{"order":"6E","path":"/utility-types-solution","title":"Utility Types (Solution)"}}},{"node":{"frontmatter":{"order":"6B","path":"/utility-types","title":"A Tour of Utility Types in React"}}},{"node":{"frontmatter":{"order":"1A","path":"/welcome","title":"Welcome and Introduction"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}