{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/passing-dipatch",
    "result": {"data":{"markdownRemark":{"html":"<p><a href=\"https://codesandbox.io/s/red-green-blue-k6frm?file=/src/Application.tsx\">Start with this CodeSandbox</a>.</p>\n<p>Before we dive into the Context API, let's wire this up so that we can update the state.</p>\n<p>If you look at <code class=\"language-text\">Application.tsx</code>, it almost looks like we have no TypeScript at all.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rgb<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    red<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    green<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    blue<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> borderColor<span class=\"token operator\">:</span> <span class=\"token function\">toRGB</span><span class=\"token punctuation\">(</span>rgb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ColorSwatch</span></span> <span class=\"token attr-name\">rgb</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>rgb<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ColorInputs</span></span> <span class=\"token attr-name\">rgb</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>rgb<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ColorSliders</span></span> <span class=\"token attr-name\">rgb</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>rgb<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But, if you hover over the <code class=\"language-text\">rgb</code> and the <code class=\"language-text\">dispatch</code> coming out of <code class=\"language-text\">useReducer</code>, you can see both definitely have some type information associated with them.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> rgb<span class=\"token operator\">:</span> RGBColorType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dispatch<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>Dispatch<span class=\"token operator\">&lt;</span>AdjustmentAction<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">RGBColorType</code> is freqently used in this application, so it's commonly stored in the <code class=\"language-text\">src/types</code> directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RGBColorType</span> <span class=\"token punctuation\">{</span>\n  red<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  green<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  blue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we look at the reducer, we can see that we have the type definition for our actions.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">AdjustmentAction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"ADJUST_RED\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"ADJUST_GREEN\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"ADJUST_BLUE\"</span><span class=\"token punctuation\">;</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  state<span class=\"token operator\">:</span> RGBColorType<span class=\"token punctuation\">,</span>\n  action<span class=\"token operator\">:</span> AdjustmentAction\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RGBColorType <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"ADJUST_RED\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> red<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"ADJUST_GREEN\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> green<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"ADJUST_BLUE\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> blue<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We're going to pass <code class=\"language-text\">dispatch</code> down into a component just to see how it works. Technically, we need to do it twice. I'm not going to because I know I am going to refactor it in a bit, but if you want to as an exercise to the reader, the you're more than welcome to.</p>\n<p>Let's head into <code class=\"language-text\">ColorSliders.tsx</code>.</p>\n<p>We want to use the current type that we pulled from <code class=\"language-text\">RGBColorType</code> but we also want to extend it to support our dispatch.</p>\n<p>I purposely used an interface instead of a type this time so that I could demonstrate the difference in how you extend each of them.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ColorSidersProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RGBColorType</span> <span class=\"token punctuation\">{</span>\n  dispatch<span class=\"token operator\">:</span> Dispatch<span class=\"token operator\">&lt;</span>AdjustmentAction<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Okay, now we can pass in <code class=\"language-text\">dispatch</code> to our <code class=\"language-text\">ColorSliders</code> component in <code class=\"language-text\">Application.tsx</code>;</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ColorSliders</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rgb<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">dispatch</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>In <code class=\"language-text\">ColorSliders.tsx</code>, we can wire up the ability to dispatch actions.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adjustRed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> ChangeEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"ADJUST_RED\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token operator\">+</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adjustGreen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> ChangeEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"ADJUST_GREEN\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token operator\">+</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adjustBlue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> ChangeEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"ADJUST_BLUE\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> <span class=\"token operator\">+</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are certainly some clever ways to DRY up this code, but I'll save that for a functional programming workshop.</p>\n<p>We'd ideally like to pass these in as <code class=\"language-text\">onChange</code> props. They've got everything they need.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ColorSlider</span></span>\n  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red-slider<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Red<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>red<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>adjustRed<span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ColorSlider</span></span>\n  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>green-slider<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Green<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>green<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>adjustGreen<span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ColorSlider</span></span>\n  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blue-slider<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Blue<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>blue<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>adjustBlue<span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>But despite the fact that these <code class=\"language-text\">ColorSlider</code> props are basically some ceremony around an input field, it's a little ridiculous that we need to add props for everything that the underlying component supports.</p>\n<p>Fine. We'll go ahead and define a prop for this I guess.</p>\n<p>In <code class=\"language-text\">ColorSlider.tsx</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ColorInputProps</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onChange</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> ChangeEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ColorSlider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">,</span>\n  label<span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">,</span>\n  onChange<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ColorInputProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>color-slider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">id</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>255<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Okay, great, it works. Let's slowly fix this up.</p>\n<p>In the next few sections, we're going to:</p>\n<ul>\n<li>Refactor this a bit using the Context API.</li>\n<li>Create an abstraction for the two types of input fields on this page.</li>\n<li>Fix a bug that hasn't appeared yet with our sliders.</li>\n<li>Fix that annoying issue where we find outselves reimplementing the type properties of an input field.</li>\n</ul>\n<p><a href=\"https://codesandbox.io/s/red-green-blue-with-dispatch-8ketd?file=/src/ColorSlider.tsx\">This</a> is where we are at the end of this section.</p>\n<h2 id=\"where-are-we-now\" style=\"position:relative;\"><a href=\"#where-are-we-now\" aria-label=\"where are we now permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where Are We Now?</h2>\n<ul>\n<li><code class=\"language-text\">examples/23-color-swatch-passing-dispatch</code></li>\n<li><code class=\"language-text\">projects/color-swatch-base</code> on the <code class=\"language-text\">color-swatch-passing-dispatch</code> branch.</li>\n<li><a href=\"https://codesandbox.io/s/red-green-blue-with-dispatch-8ketd?file=/src/ColorSlider.tsx\">CodeSandbox</a></li>\n</ul>","frontmatter":{"path":"/passing-dipatch","title":"Prologue: Passing Dispatch as a Props","order":"5A","section":"Color and Context","description":"Getting started with a simple color swatch application."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"5D","path":"/refactoring-color-inputs","title":"Refactoring the Color Inputs"}}},{"node":{"frontmatter":{"order":"9G","path":"/create-context","title":"Solving for Context API Edge Cases"}}},{"node":{"frontmatter":{"order":"9F","path":"/dependent-props","title":"Demanding Props Based on Other Props"}}},{"node":{"frontmatter":{"order":"9A","path":"/limiting-props","title":"Limiting Props a Component Can Take Based on Other Props"}}},{"node":{"frontmatter":{"order":"9D","path":"/polymorphic-components-solution","title":"Polymorphic Components (Solution)"}}},{"node":{"frontmatter":{"order":"9C","path":"/polymorphic-components-exercise","title":"Polymorphic Components (Exercise)"}}},{"node":{"frontmatter":{"order":"9B","path":"/polymorphic-components","title":"Polymorphic Components with TypeScript"}}},{"node":{"frontmatter":{"order":"6C","path":"/utility-types-character-cards","title":"Refactoring the Character Cards with Utility Types"}}},{"node":{"frontmatter":{"order":"3D","path":"/class-based-components","title":"Typing Class-based Components"}}},{"node":{"frontmatter":{"order":"10C","path":"/sandboxes","title":"Code Sandboxes"}}},{"node":{"frontmatter":{"order":"2C","path":"/commonly-used-props","title":"Commonly-Used Props"}}},{"node":{"frontmatter":{"order":"5B","path":"/context-api","title":"The Context API"}}},{"node":{"frontmatter":{"order":"5C","path":"/context-with-reducer","title":"The Context API with State Management"}}},{"node":{"frontmatter":{"order":"3F","path":"/dog-facts","title":"Exercise: Dog Facts"}}},{"node":{"frontmatter":{"order":"3E","path":"/forms-and-events","title":"Forms and Events (Exercise)"}}},{"node":{"frontmatter":{"order":"9E","path":"/overloads","title":"Function Overloads"}}},{"node":{"frontmatter":{"order":"6A","path":"/generics","title":"Working with Generics"}}},{"node":{"frontmatter":{"order":"8B","path":"/higher-order-components-exercise","title":"Higher Order Components with TypeScript (Exercise)"}}},{"node":{"frontmatter":{"order":"8C","path":"/higher-order-components-solution","title":"Higher Order Components (Solution)"}}},{"node":{"frontmatter":{"order":"8A","path":"/higher-order-components","title":"Higher Order Components with TypeScript"}}},{"node":{"frontmatter":{"order":"10A","path":"/migration","title":"Migrating From JavaScript"}}},{"node":{"frontmatter":{"order":"5A","path":"/passing-dipatch","title":"Prologue: Passing Dispatch as a Props"}}},{"node":{"frontmatter":{"order":"4B","path":"/reducers-exercise","title":"Reducers (Exercise)"}}},{"node":{"frontmatter":{"order":"4C","path":"/reducers-solution","title":"Reducers (Solution)"}}},{"node":{"frontmatter":{"order":"4A","path":"/reducers","title":"Typing Reducers"}}},{"node":{"frontmatter":{"order":"2B","path":"/refactoring-from-proptypes","title":"Refactoring from PropTypes"}}},{"node":{"frontmatter":{"order":"1B","path":"/sales-pitch","title":"Why Use TypeScript? (A Sales Pitch)"}}},{"node":{"frontmatter":{"order":"2A","path":"/the-most-basic-example","title":"The Very Basics"}}},{"node":{"frontmatter":{"order":"6G","path":"/type-template-literals-refactoring-adjustment-actions","title":"Type Template Literals: Refactoring Our Color Adjustment Actions"}}},{"node":{"frontmatter":{"order":"6F","path":"/type-template-literals","title":"Type Template Literals"}}},{"node":{"frontmatter":{"order":"10B","path":"/types-versus-interfaces","title":"Types Versus Interfaces"}}},{"node":{"frontmatter":{"order":"2E","path":"/typing-children-solution","title":"Typing Children (Solution)"}}},{"node":{"frontmatter":{"order":"2D","path":"/typing-children","title":"Typing Children"}}},{"node":{"frontmatter":{"order":"2F","path":"/typing-styling","title":"Typing Styling"}}},{"node":{"frontmatter":{"order":"3C","path":"/use-effect","title":"useEffect"}}},{"node":{"frontmatter":{"order":"3B","path":"/use-state-no-default-value","title":"Setting State without a Default Value"}}},{"node":{"frontmatter":{"order":"3A","path":"/use-state","title":"useState Hook"}}},{"node":{"frontmatter":{"order":"6D","path":"/utility-types-exercise","title":"Utility Types (Exercise)"}}},{"node":{"frontmatter":{"order":"6E","path":"/utility-types-solution","title":"Utility Types (Solution)"}}},{"node":{"frontmatter":{"order":"6B","path":"/utility-types","title":"A Tour of Utility Types in React"}}},{"node":{"frontmatter":{"order":"1A","path":"/welcome","title":"Welcome and Introduction"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}