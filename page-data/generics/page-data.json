{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/generics",
    "result": {"data":{"markdownRemark":{"html":"<p>We've gotten this far without really getting in the weeds over some of TypeScript's more confusing syntax. Up until this point, I have handwaved over the syntax for generic type variables, but we're going to be using them a bit more in the next section of this course. It makes sense for us to take a moment or two to <em>really</em> understand what's going on here.</p>\n<p><strong>Nota bene</strong>: We're going to learn <em>just enough</em> about generics to make our lives easier as we implement some common component patterns in React. It's <em>not</em> our goal to have an exhaustive discussion on the topic. If you're interested in learning more, I recommend checking out the workshops on <a href=\"https://frontendmasters.com/courses/typescript-v2/\">TypeScript Fundamentals</a> and <a href=\"https://frontendmasters.com/courses/production-typescript/\">Production-Grade TypeScript</a>.</p>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/2/generics.html\">Generics</a> allow us to be a little bit more flexible with our type system. You can think of them as variables for your types.</p>\n<p>You might have seen some syntax at looks like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Link<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  next<span class=\"token operator\">:</span> Link<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can't just make a new object with that type.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> link<span class=\"token operator\">:</span> Link <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, we can define what type <code class=\"language-text\">T</code> should be.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> link<span class=\"token operator\">:</span> Link<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It's kind of like a variable.</p>\n<p>You can use this variable to pay it forward a bit.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> firstLink<span class=\"token operator\">:</span> Link<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// This won't work.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will work, however:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> firstLink<span class=\"token operator\">:</span> Link<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  next<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>TypeScript will try to help you out as much as possible.</p>\n<p>You can also use this in a function.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This would be not great if we had to make new functions for every different type that we anted to use the indentity function on.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It turns out that TypeScript will try its darnest to help out.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I'm just going to casually mention that this might be important for our understanding later.</p>\n<h2 id=\"your-mission\" style=\"position:relative;\"><a href=\"#your-mission\" aria-label=\"your mission permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Your Mission</h2>\n<p>This will be quick, but we'll build a little break into it.</p>\n<p>Are you familiar with the <a href=\"https://lodash.com/docs/#tap\"><code class=\"language-text\">tap</code> utility method</a>? <code class=\"language-text\">tap</code> takes an argument and a function. It passes the argument into the function and immediately returns the return value.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arrayWithoutLast <span class=\"token operator\">=</span> <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Pop always returns the value it removed from the end of the array.</span>\n  <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So, here are the nuances.</p>\n<p>It not only needs to figure out the type like <code class=\"language-text\">identity</code> but it also needs to pass that same type into the function, <em>and</em> it needs to return that type. The callback function is just mutating the object, so it doesn't need to return anything.</p>\n<p>The following code should return the original array without the last item.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> popped <span class=\"token operator\">=</span> <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(You can peek at the solution <a href=\"https://gist.github.com/stevekinney/d14cbaff3e0aa8ee3e1dcf96837af1ca\">here</a>).</p>\n<h2 id=\"use-with-arrow-functions\" style=\"position:relative;\"><a href=\"#use-with-arrow-functions\" aria-label=\"use with arrow functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use With Arrow Functions</h2>\n<p>You need a weird comma.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> createNode <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Link<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> addNext <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span> Link<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Link<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> createNodeAndNext <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> firstNode <span class=\"token operator\">=</span> <span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  firstNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> firstNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> createNodeAndNextTapped <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Link<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">addNext</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nextNode <span class=\"token operator\">=</span> <span class=\"token function\">addNext</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> twoNodes <span class=\"token operator\">=</span> <span class=\"token function\">createNodeAndNextTapped</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> twoMoreNodes <span class=\"token operator\">=</span> <span class=\"token function\">createNodeAndNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"path":"/generics","title":"Working with Generics","order":"6A","section":"Just Enough TypeScript","description":"A gentle tour of what generics are in TypeScript and how they work."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"5D","path":"/refactoring-color-inputs","title":"Refactoring the Color Inputs"}}},{"node":{"frontmatter":{"order":"9G","path":"/create-context","title":"Solving for Context API Edge Cases"}}},{"node":{"frontmatter":{"order":"9F","path":"/dependent-props","title":"Demanding Props Based on Other Props"}}},{"node":{"frontmatter":{"order":"9A","path":"/limiting-props","title":"Limiting Props a Component Can Take Based on Other Props"}}},{"node":{"frontmatter":{"order":"9D","path":"/polymorphic-components-solution","title":"Polymorphic Components (Solution)"}}},{"node":{"frontmatter":{"order":"9C","path":"/polymorphic-components-exercise","title":"Polymorphic Components (Exercise)"}}},{"node":{"frontmatter":{"order":"9B","path":"/polymorphic-components","title":"Polymorphic Components with TypeScript"}}},{"node":{"frontmatter":{"order":"6C","path":"/utility-types-character-cards","title":"Refactoring the Character Cards with Utility Types"}}},{"node":{"frontmatter":{"order":"3D","path":"/class-based-components","title":"Typing Class-based Components"}}},{"node":{"frontmatter":{"order":"10C","path":"/sandboxes","title":"Code Sandboxes"}}},{"node":{"frontmatter":{"order":"2C","path":"/commonly-used-props","title":"Commonly-Used Props"}}},{"node":{"frontmatter":{"order":"5B","path":"/context-api","title":"The Context API"}}},{"node":{"frontmatter":{"order":"5C","path":"/context-with-reducer","title":"The Context API with State Management"}}},{"node":{"frontmatter":{"order":"3F","path":"/dog-facts","title":"Exercise: Dog Facts"}}},{"node":{"frontmatter":{"order":"3E","path":"/forms-and-events","title":"Forms and Events (Exercise)"}}},{"node":{"frontmatter":{"order":"9E","path":"/overloads","title":"Function Overloads"}}},{"node":{"frontmatter":{"order":"6A","path":"/generics","title":"Working with Generics"}}},{"node":{"frontmatter":{"order":"8B","path":"/higher-order-components-exercise","title":"Higher Order Components with TypeScript (Exercise)"}}},{"node":{"frontmatter":{"order":"8C","path":"/higher-order-components-solution","title":"Higher Order Components (Solution)"}}},{"node":{"frontmatter":{"order":"8A","path":"/higher-order-components","title":"Higher Order Components with TypeScript"}}},{"node":{"frontmatter":{"order":"10A","path":"/migration","title":"Migrating From JavaScript"}}},{"node":{"frontmatter":{"order":"5A","path":"/passing-dipatch","title":"Prologue: Passing Dispatch as a Props"}}},{"node":{"frontmatter":{"order":"4B","path":"/reducers-exercise","title":"Reducers (Exercise)"}}},{"node":{"frontmatter":{"order":"4C","path":"/reducers-solution","title":"Reducers (Solution)"}}},{"node":{"frontmatter":{"order":"4A","path":"/reducers","title":"Typing Reducers"}}},{"node":{"frontmatter":{"order":"2B","path":"/refactoring-from-proptypes","title":"Refactoring from PropTypes"}}},{"node":{"frontmatter":{"order":"1B","path":"/sales-pitch","title":"Why Use TypeScript? (A Sales Pitch)"}}},{"node":{"frontmatter":{"order":"2A","path":"/the-most-basic-example","title":"The Very Basics"}}},{"node":{"frontmatter":{"order":"6G","path":"/type-template-literals-refactoring-adjustment-actions","title":"Type Template Literals: Refactoring Our Color Adjustment Actions"}}},{"node":{"frontmatter":{"order":"6F","path":"/type-template-literals","title":"Type Template Literals"}}},{"node":{"frontmatter":{"order":"10B","path":"/types-versus-interfaces","title":"Types Versus Interfaces"}}},{"node":{"frontmatter":{"order":"2E","path":"/typing-children-solution","title":"Typing Children (Solution)"}}},{"node":{"frontmatter":{"order":"2D","path":"/typing-children","title":"Typing Children"}}},{"node":{"frontmatter":{"order":"2F","path":"/typing-styling","title":"Typing Styling"}}},{"node":{"frontmatter":{"order":"3C","path":"/use-effect","title":"useEffect"}}},{"node":{"frontmatter":{"order":"3B","path":"/use-state-no-default-value","title":"Setting State without a Default Value"}}},{"node":{"frontmatter":{"order":"3A","path":"/use-state","title":"useState Hook"}}},{"node":{"frontmatter":{"order":"6D","path":"/utility-types-exercise","title":"Utility Types (Exercise)"}}},{"node":{"frontmatter":{"order":"6E","path":"/utility-types-solution","title":"Utility Types (Solution)"}}},{"node":{"frontmatter":{"order":"6B","path":"/utility-types","title":"A Tour of Utility Types in React"}}},{"node":{"frontmatter":{"order":"1A","path":"/welcome","title":"Welcome and Introduction"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}