{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/higher-order-components",
    "result": {"data":{"markdownRemark":{"html":"<p>We're going to base what we're doing off of <a href=\"https://codesandbox.io/s/character-sheet-utility-types-complete-jb8d4\">this sandbox</a>.</p>\n<p>We'll start at a super high level with just a component that wraps another component and does <em>nothing</em> to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withCharacter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Component<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Component<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the <code class=\"language-text\">Application</code> component, we can use our pointless HOC.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> CharacterInformationWithCharacter <span class=\"token operator\">=</span> <span class=\"token function\">withCharacter</span><span class=\"token punctuation\">(</span>CharacterInformation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And, we'll swap it out in the return value of <code class=\"language-text\">Application</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n  character <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharacterInformationWithCharacter</span></span> <span class=\"token attr-name\">character</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>character<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This has just made it a worse component since it now has lost its type information. But, it's a start.</p>\n<p>Let's move in the state management piece.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withCharacter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Component<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>character<span class=\"token punctuation\">,</span> setCharacter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CharacterType <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetchCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setCharacter</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">character</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>character<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And now we can simplify <code class=\"language-text\">Application</code> a bit.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> CharacterInformationWithCharacter <span class=\"token operator\">=</span> <span class=\"token function\">withCharacter</span><span class=\"token punctuation\">(</span>CharacterInformation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharacterInformationWithCharacter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We still have the issue with the fact that it will take any props, however.</p>\n<p>What we <em>want</em> is for our higher order component to take any of the props the component it wraps takes, <em>except</em> the ones we plan on passing in.</p>\n<p>This sounds like a job for a generic.</p>\n<p>Let's start somewhat naively.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">withCharacter</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>Component<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ComponentType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>character<span class=\"token punctuation\">,</span> setCharacter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CharacterType <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetchCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setCharacter</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">character</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>character<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, it loads, but—as usual—TypeScript is angry with us.</p>\n<p>It's angry with us about two things:</p>\n<ul>\n<li>First, it's angry with us that <code class=\"language-text\">CharacterInformationWithCharacter</code> isn't getting the <code class=\"language-text\">character</code> that the underlying component is expecting.</li>\n<li>Our higher order component doesn't have any idea that <code class=\"language-text\">Component</code> is something that can accept a <code class=\"language-text\">character</code> prop.</li>\n</ul>\n<p>So, it stands that we need to do two things.</p>\n<ul>\n<li>Tell our HOC that we will only wrap components that have take the props that we plan on passing in.</li>\n<li>Return a component that doesn't worry about the props that our HOC is passing in.</li>\n</ul>\n<p>Okay, so what does our HOC pass in? Well, in this case, it passes in <code class=\"language-text\">character</code>. Right on. Let's get clear about that.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">WithCharacterProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  character<span class=\"token operator\">:</span> CharacterType<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, we'll tell our HOC, that cool—set the generic, <code class=\"language-text\">T</code> to the type of the component that we pass in, <em>but</em> that component <em>must</em> have a <code class=\"language-text\">character</code> prop that is of the type <code class=\"language-text\">CharacterType</code>.</p>\n<p>Next, we want to say that our wrapper is going to take all of the props that the wrapped component takes, except for <code class=\"language-text\">character</code> because we're passing that one in.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> WithCharacterProps<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This quiets the error in <code class=\"language-text\">Application</code>.</p>\n<p>Next, we're going to have to help TypeScript along a little bit. We're going to promise that we're going to give it whatever other props it's expecting—none in this case—along with <code class=\"language-text\">character</code> and tell the component that's the complete package.</p>\n<p>This makes sense because we <em>know</em> that this component takes a <code class=\"language-text\">character</code> prop since we confirmed that we only accept components that take a <code class=\"language-text\">character</code> prop. So, we're passing that in and then whatever else that component might choose to take down the road.</p>\n<p>The end result looks something like this and can be found <a href=\"https://codesandbox.io/s/character-sheet-utility-with-hoc-3opyk?file=/src/Application.tsx:740-746\">here</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CharacterType<span class=\"token punctuation\">,</span> fetchCharacter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./characters\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Loading <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Loading\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CharacterInformation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./CharacterInformation\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">WithCharacterProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  character<span class=\"token operator\">:</span> CharacterType<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">withCharacter</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> WithCharacterProps<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  Component<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ComponentType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> WithCharacterProps<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>character<span class=\"token punctuation\">,</span> setCharacter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CharacterType <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetchCharacter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setCharacter</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loading</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> character <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">character</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>character<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Application</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> CharacterInformationWithCharacter <span class=\"token operator\">=</span> <span class=\"token function\">withCharacter</span><span class=\"token punctuation\">(</span>CharacterInformation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharacterInformationWithCharacter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Application<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"where-are-we-now\" style=\"position:relative;\"><a href=\"#where-are-we-now\" aria-label=\"where are we now permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where Are We Now?</h2>\n<ul>\n<li><code class=\"language-text\">projects/character-card</code> on the <code class=\"language-text\">character-card-with-hoc</code> branch</li>\n<li><code class=\"language-text\">examples/32-character-card-with-hoc</code></li>\n<li><a href=\"https://codesandbox.io/s/character-sheet-utility-with-hoc-3opyk?file=/src/Application.tsx:740-746\">CodeSandbox</a></li>\n</ul>","frontmatter":{"path":"/higher-order-components","title":"Higher Order Components with TypeScript","order":"8A","section":"Higher Order Components","description":"Implementing the higher-order component pattern with TypeScript."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"5D","path":"/refactoring-color-inputs","title":"Refactoring the Color Inputs"}}},{"node":{"frontmatter":{"order":"9G","path":"/create-context","title":"Solving for Context API Edge Cases"}}},{"node":{"frontmatter":{"order":"9F","path":"/dependent-props","title":"Demanding Props Based on Other Props"}}},{"node":{"frontmatter":{"order":"9A","path":"/limiting-props","title":"Limiting Props a Component Can Take Based on Other Props"}}},{"node":{"frontmatter":{"order":"9D","path":"/polymorphic-components-solution","title":"Polymorphic Components (Solution)"}}},{"node":{"frontmatter":{"order":"9C","path":"/polymorphic-components-exercise","title":"Polymorphic Components (Exercise)"}}},{"node":{"frontmatter":{"order":"9B","path":"/polymorphic-components","title":"Polymorphic Components with TypeScript"}}},{"node":{"frontmatter":{"order":"6C","path":"/utility-types-character-cards","title":"Refactoring the Character Cards with Utility Types"}}},{"node":{"frontmatter":{"order":"3D","path":"/class-based-components","title":"Typing Class-based Components"}}},{"node":{"frontmatter":{"order":"10C","path":"/sandboxes","title":"Code Sandboxes"}}},{"node":{"frontmatter":{"order":"2C","path":"/commonly-used-props","title":"Commonly-Used Props"}}},{"node":{"frontmatter":{"order":"5B","path":"/context-api","title":"The Context API"}}},{"node":{"frontmatter":{"order":"5C","path":"/context-with-reducer","title":"The Context API with State Management"}}},{"node":{"frontmatter":{"order":"3F","path":"/dog-facts","title":"Exercise: Dog Facts"}}},{"node":{"frontmatter":{"order":"3E","path":"/forms-and-events","title":"Forms and Events (Exercise)"}}},{"node":{"frontmatter":{"order":"9E","path":"/overloads","title":"Function Overloads"}}},{"node":{"frontmatter":{"order":"6A","path":"/generics","title":"Working with Generics"}}},{"node":{"frontmatter":{"order":"8B","path":"/higher-order-components-exercise","title":"Higher Order Components with TypeScript (Exercise)"}}},{"node":{"frontmatter":{"order":"8C","path":"/higher-order-components-solution","title":"Higher Order Components (Solution)"}}},{"node":{"frontmatter":{"order":"8A","path":"/higher-order-components","title":"Higher Order Components with TypeScript"}}},{"node":{"frontmatter":{"order":"10A","path":"/migration","title":"Migrating From JavaScript"}}},{"node":{"frontmatter":{"order":"5A","path":"/passing-dipatch","title":"Prologue: Passing Dispatch as a Props"}}},{"node":{"frontmatter":{"order":"4B","path":"/reducers-exercise","title":"Reducers (Exercise)"}}},{"node":{"frontmatter":{"order":"4C","path":"/reducers-solution","title":"Reducers (Solution)"}}},{"node":{"frontmatter":{"order":"4A","path":"/reducers","title":"Typing Reducers"}}},{"node":{"frontmatter":{"order":"2B","path":"/refactoring-from-proptypes","title":"Refactoring from PropTypes"}}},{"node":{"frontmatter":{"order":"1B","path":"/sales-pitch","title":"Why Use TypeScript? (A Sales Pitch)"}}},{"node":{"frontmatter":{"order":"2A","path":"/the-most-basic-example","title":"The Very Basics"}}},{"node":{"frontmatter":{"order":"6G","path":"/type-template-literals-refactoring-adjustment-actions","title":"Type Template Literals: Refactoring Our Color Adjustment Actions"}}},{"node":{"frontmatter":{"order":"6F","path":"/type-template-literals","title":"Type Template Literals"}}},{"node":{"frontmatter":{"order":"10B","path":"/types-versus-interfaces","title":"Types Versus Interfaces"}}},{"node":{"frontmatter":{"order":"2E","path":"/typing-children-solution","title":"Typing Children (Solution)"}}},{"node":{"frontmatter":{"order":"2D","path":"/typing-children","title":"Typing Children"}}},{"node":{"frontmatter":{"order":"2F","path":"/typing-styling","title":"Typing Styling"}}},{"node":{"frontmatter":{"order":"3C","path":"/use-effect","title":"useEffect"}}},{"node":{"frontmatter":{"order":"3B","path":"/use-state-no-default-value","title":"Setting State without a Default Value"}}},{"node":{"frontmatter":{"order":"3A","path":"/use-state","title":"useState Hook"}}},{"node":{"frontmatter":{"order":"6D","path":"/utility-types-exercise","title":"Utility Types (Exercise)"}}},{"node":{"frontmatter":{"order":"6E","path":"/utility-types-solution","title":"Utility Types (Solution)"}}},{"node":{"frontmatter":{"order":"6B","path":"/utility-types","title":"A Tour of Utility Types in React"}}},{"node":{"frontmatter":{"order":"1A","path":"/welcome","title":"Welcome and Introduction"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}